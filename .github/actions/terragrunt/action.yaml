name: "setup-terraform"
description: "setup terraform"
inputs:
  terraform_version:
    required: false
    description: 'versao do terraform'
    default: '1.3.3'
  terragrunt_version:
    required: false
    description: 'versao do terragrunt'
    default: '0.39.2'
  terragrunt_path:
    type: string
    required: true
    description: 'path terragrunt'

runs:
  using: "composite"
  steps:
  - name: HashiCorp - Setup Terraform
    uses: hashicorp/setup-terraform@v2.0.2
    with:
      terraform_version: ${{ inputs.terraform_version }}
  - name: Setup Terragrunt
    uses: autero1/action-terragrunt@v1.1.0
    with:
      terragrunt_version: ${{ inputs.terragrunt_version }}
  - name: Terragrunt init
    id: init
    run: terragrunt init
    working-directory: ${{ inputs.terragrunt_path }}
    shell: bash
  - name: Terragrunt validate
    id: validate
    run: terragrunt validate -no-color
    working-directory: ${{ inputs.terragrunt_path }}
    shell: bash
  - name: Terragrunt plan
    id: plan
    run: terragrunt plan -no-color 
    working-directory: ${{ inputs.terragrunt_path }}
    shell: bash
  - name: Terragrunt plan pull request 
      uses: actions/github-script@v6
      env:
        PLAN: "terragrunt\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
          })
          // 2. Prepare format of the comment
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>
          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`
          </details>
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          <details><summary>Show Plan</summary>
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          </details>
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }
