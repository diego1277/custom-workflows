name: Terraform plan

on:
  workflow_call:
    inputs:
      terraform_version:
        type: string
        description: 'versao do terraform'
        default: 1.3.3
        required: false
      terragrunt_version:
        type: string
        required: false
        description: 'versao do terragrunt'
        default: '0.39.2'        
      terraform_path:
        type: string
        required: true
        description: 'path terragrunt / terragrunt'
      terragrunt_deploy:
        type: boolean
        required: false
        description: 'definir se sera realizado deploy terragrunt'
      deploy_on_pull_request:
        type: boolean
        required: false
        default: true
        description: 'deploy apenas realizado apenas em pull request'        
      
        
jobs:
  plan:
    runs-on: [ubuntu-latest]
    name: plan
    steps:
    - name: Setup terraform
      uses: doliveiraorg/custom-workflows/.github/actions/terraform@main
      with:
        terraform_version: ${{ inputs.terraform_version }}
        terragrunt_version: ${{ inputs.terragrunt_version }}
        terraform_path: ${{ inputs.terraform_path }}
        repo_terraform_gh_token: ${{ secrets.GH_TOKEN }}
        repo_terraform_gh_user: ${{ secrets.GH_USER }}
        aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
        aws_region: ${{ secrets.AWS_REGION }}
        terragrunt_deploy: ${{ inputs.terragrunt_deploy }}
    - name: Terraform plan
      id: plan
      run: |
             if [ "$TERRAGRUNT_DEPLOY" == "true" ]
             then
                  terragrunt plan -no-color
             else
                  terraform plan -no-color
             fi    
      working-directory: ${{ inputs.terraform_path }}
      shell: bash
      env:
        TERRAGRUNT_DEPLOY: ${{ inputs.terragrunt_deploy }}
    - name: Terraform plan pull request 
      uses: actions/github-script@v6
      if: ${{ inputs.deploy_on_pull_request }} == true
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
          })
          // 2. Prepare format of the comment
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>
          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`
          </details>
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          <details><summary>Show Plan</summary>
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          </details>
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }
    - name: Setup infracost
      uses: doliveiraorg/custom-workflows/.github/actions/infracost@main
      if: ${{ inputs.deploy_on_pull_request }} == 'true'
      with:
        repo_terraform_gh_token: ${{ secrets.GH_TOKEN }} 
        repo_terraform_gh_user: ${{ secrets.GH_USER }}
        infracost_api_key: ${{ secrets.INFRACOST_API_KEY }}
        terraform_path: ${{ inputs.terraform_path }}
        token_github: ${{ secrets.GITHUB_TOKEN }}
